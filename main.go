// Copyright 2017 Marios Andreopoulos
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
  Package versiongen provides an opinionated method to add version information
  (version number and git commit hash) to go projects via 'go generate'.

  It assumes:
  1. your go project uses git for source control
  2. you have at least one tagged commit (e.g v0.1)
*/
package versiongen

import (
	"fmt"
	"os"
	"os/exec"
	"strings"
	"time"
)

const (
	defaultFilename    = "version.go"
	DefaultDirtyString = "-dirty"
	DefaultTimeout     = 15 * time.Second
)

// DirtyString is a string appended to the vgVersion constant if you have
// uncommited changes in your current code. Default is "-dirty" but you
// could change it to something like "+".
var DirtyString = DefaultDirtyString

// IgnoreFiles is an array of filenames that versiongen should ignore when
// trying to detect uncommited changes. This could be autogenerated
// files that you added to the repository, like version.go for example.
var IgnoreFiles []string

// Timeout is of type time.Duration and is the amount of time versiongen will
// wait for each git command it runs to complete before killing it. Default
// is 15 * time.Second.
var Timeout = DefaultTimeout

type versionData struct {
	describeTags string
	commit       string
}

// Create will create a file named version.go in the top directory of your
// project, that will contain two constants.
//
// vgVersion : The version of your program as given by 'git describe --tags'
//             plus the DirtyString variable if you have uncommited changes.
// vgHash    : The SHA1 hash of your current commit.
func Create() error {
	return CreateFile(defaultFilename)
}

// CreateFile will work as Create() but instead of writing version.go in the
// top level directory of your project, will write filename instead.
func CreateFile(filename string) error {
	// Get version
	version, err := runGitSingleLineReturn("git", "describe", "--tags")
	if err != nil {
		return err
	}

	// Get SHA1
	hash, err := runGitSingleLineReturn("git", "rev-parse", "HEAD")
	if err != nil {
		return err
	}

	// Get uncommited changes, split them by line
	diffIndex, err := runGitSingleLineReturn("git", "diff-index", "HEAD")
	if err != nil {
		return err
	}
	diffIndexLines := strings.Split(strings.TrimSpace(diffIndex), "\n")

	uncommitedChanges := false
UNCOMMITED:
	for _, v := range diffIndexLines { // For each uncommited, changed file
		matches := 0
		for _, v2 := range IgnoreFiles { // Check against each of blacklisted files
			if strings.Contains(v, v2) {
				matches++
			}
		}
		if matches == 0 { // If none matched, then this file has uncommited changes and the build is dirty
			uncommitedChanges = true
			break UNCOMMITED
		}
	}
	if uncommitedChanges {
		version += DirtyString
	}

	err = writeVersionFile(filename, versionData{version, hash})
	return err
}

// Run a command and return the results and possible errors.
func runGitSingleLineReturn(command string, args ...string) (string, error) {
	cmd := exec.Command(command, args...)

	timer := time.AfterFunc(Timeout, func() { cmd.Process.Kill() })
	out, err := cmd.CombinedOutput()
	timer.Stop()
	if err != nil {
		return "", err
	}

	result := strings.TrimSpace(string(out))
	return result, nil
}

// Write the version file.
func writeVersionFile(filename string, data versionData) error {
	file, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer file.Close()

	out := fmt.Sprintf(`package main
// auto generated by github.com/andmarios/go-versiongen

const (
	vgVersion   = "%s"
	vgHash      = "%s"
)
`, data.describeTags, data.commit)

	_, err = file.Write([]byte(out))
	return err
}
